//-------------------------------------------------------------------------------------
package codex.xbit.api.server.trader;
//-------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

import codex.common.utils.*;
import codex.xbit.api.common.aspects.*;
import codex.xbit.api.common.configs.*;
import codex.xbit.api.common.loaders.*;

import codex.xbit.api.server.trader.core.components.*;

import codex.xbit.api.server.trader.env.single.*;
import codex.xbit.api.server.trader.env.users.*;


//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
public class Trader extends Thread implements OperableAspect {
	private Debug debug;
	private Resolver resolver;

	private Single single;
	private Users users;

//-------------------------------------------------------------------------------------
    public Trader(Debug _debug, ServerConfiguration _serverConfiguration) {
    	debug = _debug;
    	resolver = new Resolver(debug, this, _serverConfiguration);
        start();
    }

//-------------------------------------------------------------------------------------
    public void run() {
    	load();
	}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
    public Resolver getResolver() {
    	return resolver;
	}

//-------------------------------------------------------------------------------------
    public Single getSingle() {
    	return single;
	}

//-------------------------------------------------------------------------------------
    public Users getUsers() {
    	return users;
	}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
	public Object getInfo(int _netCommandParameter, Object _message){
		if(_message == null){
			return single.getInfo(_netCommandParameter);
		} else {
			return users.getInfo(_netCommandParameter, _message);
		}
	}

//-------------------------------------------------------------------------------------
    public void sendSignal(String[] _args) {
    	single.sendSignal(_args);
	}

//-------------------------------------------------------------------------------------
    public void changeOrderbook(String[] _args) {
    	users.changeOrderbook(_args);
	}

//-------------------------------------------------------------------------------------
    public void changeProfit(String[] _args) {
    	users.changeProfit(_args);
	}

//-------------------------------------------------------------------------------------
    public void changeStrategy(String[] _args) {
    	users.changeStrategy(_args);
	}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
    public void load() {
//    	Debug _debug0 = new Debug(debug, "single", Debug.IMPORTANT3);
    	single = new Single(debug, resolver);
    	resolver.load();

        single.load();

    	users = new Users(debug, resolver);
		users.load();
	}


//-------------------------------------------------------------------------------------
    public void save(){
//    	debug.outln(Debug.IMPORTANT3, "Trader.save...");
    	if(users != null){
        	users.save();
        }
    	if(single != null){
        	single.save();
    	}
    }

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------
