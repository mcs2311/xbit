//-------------------------------------------------------------------------------------
package codex.xbit.api.server.trader.env.users.level2;
//-------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

import codex.common.utils.*;
import codex.xbit.api.common.configs.*;

import codex.xbit.api.server.trader.*;
import codex.xbit.api.common.aspects.*;
import codex.xbit.api.server.trader.core.components.*;

import codex.xbit.api.server.trader.env.users.level2.shadowbalances.*;
import codex.xbit.api.server.trader.env.users.level2.shadoworders.*;

//-------------------------------------------------------------------------------------
public class Level2 extends AbstractLevel {

	private ShadowBalances shadowBalances;
	private ShadowOrders shadowOrders;

//-------------------------------------------------------------------------------------
    public Level2(Debug _debug, Resolver _resolver) {
    	super(_debug, _resolver, "L2");
        shadowBalances = new ShadowBalances(debug, _resolver);
        shadowOrders = new ShadowOrders(debug, _resolver);
    }

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
	public ShadowBalances getShadowBalances(){
		return shadowBalances;
	}

//-------------------------------------------------------------------------------------
	public ShadowOrders getShadowOrders(){
		return shadowOrders;
	}

//-------------------------------------------------------------------------------------
	public Object getInfo(int _netCommandParameter, String _tactic){
//		return tactics.getInfo(_netCommandParameter, _tactic);
		return null;
	}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
    public void load() {
        shadowBalances.load();
        shadowOrders.load();
	}

//-------------------------------------------------------------------------------------
    public void save(){
//    	debug.outln(Debug.IMPORTANT3, "Level2.save...");
    	if(shadowBalances != null){
        	shadowBalances.save();
    	}
    	if(shadowOrders != null){
        	shadowOrders.save();
    	}
    }

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------