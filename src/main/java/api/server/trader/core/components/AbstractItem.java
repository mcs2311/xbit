//-------------------------------------------------------------------------------------
package codex.xbit.api.server.trader.core.components;
//-------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

import io.reactivex.*;
import io.reactivex.schedulers.*;
import io.reactivex.disposables.*;

import codex.common.utils.*;
import codex.xbit.api.common.configs.*;
import codex.xbit.api.common.loaders.*;


import codex.xbit.api.server.trader.common.events.*;
import codex.xbit.api.server.trader.common.objects.*;

import codex.xbit.api.common.aspects.*;

//-------------------------------------------------------------------------------------
public abstract class AbstractItem implements OperableAspect/*, EventListenerAspect, EventPusherAspect*/ {
	protected Debug debug;
    protected Resolver resolver;
	protected long id;
	protected String name;

	private boolean isEnabled;
//	private int state;

    //---rx:
	protected CompositeDisposable disposables;

//-------------------------------------------------------------------------------------
    public AbstractItem(Resolver _resolver){
    	this(null, _resolver, null);
    }

//-------------------------------------------------------------------------------------
    public AbstractItem(Debug _debug, Resolver _resolver){
    	this(_debug, _resolver, null);
    }

//-------------------------------------------------------------------------------------
    public AbstractItem(Debug _debug, Resolver _resolver, String _name){
    	debug = _debug;
    	resolver = _resolver;
    	name = _name;
		long _id = -1;
		try{
			_id = Long.parseLong(_name);
		}catch(Exception _e){}		
		setId(_id);
// 		load();
		setEnabled(true);
    }


//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
    public long getId(){
    	return id;
    }

//-------------------------------------------------------------------------------------
    public void setId(long _id){
    	id = _id;
    }

//-------------------------------------------------------------------------------------
    public String getName(){
    	return name;
    }

//-------------------------------------------------------------------------------------
    public void setName(String _name){
    	name = _name;
    }

//-------------------------------------------------------------------------------------
    public boolean isEnabled(){
    	return isEnabled;
    }

//-------------------------------------------------------------------------------------
    public void setEnabled(boolean _isEnabled){
    	isEnabled = _isEnabled;
    }

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
	public void onError(Throwable _t){
/*		debug.outln(Debug.ERROR, "onError: " + "[" + this + "]: " + _t.getMessage());
		StackTraceElement[]	_stack = _t.getStackTrace();
		for (int i = 0; i < _stack.length; i++) {
			debug.outln(Debug.ERROR, "S[" + i + "]:" + _stack[i].toString());
		}*/
		ExceptionUtils.printException(debug, this, _t);
//		_t.printStackTrace();
	}

//-------------------------------------------------------------------------------------
	public void onCompleted(){
		debug.outln(Debug.ERROR, "onCompleted:");
	}

//-------------------------------------------------------------------------------------
	public void onSubscribe(Disposable _disposable){
		debug.outln(Debug.ERROR, "onSubscribe:");
	}

//-------------------------------------------------------------------------------------
	public void close() throws IOException {
	}

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
	public void listenEvent(Event _event){
    }

//-------------------------------------------------------------------------------------
	public void pushEvent(Event _event){
    }

//-------------------------------------------------------------------------------------
    public String toString(){
    	return name;
    }
    
//-------------------------------------------------------------------------------------
	public List<String> getInfo(){
        List<String> _list = new ArrayList<String>();
		_list.add(toString());
        return _list;
    }

//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
    public void reload() {
    	save();
    	load();
	}

//-------------------------------------------------------------------------------------
    public void load() {
        disposables = new CompositeDisposable();
	}
	
//-------------------------------------------------------------------------------------
    public void save() {
        // Unsubscribe from data order book.
        if(disposables == null){
        	debug.outln(Debug.ERROR, "disposables is null in AbstractItem. Call load() on:" + this);
        } else {
        	disposables.dispose();               	
        }
//        disposables.clear(); // do not send event after activity has been destroyed     
	}
	
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------
}
//-------------------------------------------------------------------------------------
